generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String
  passwordHash  String
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  roles         UserRole[]
  auditLogs     AuditLog[]    @relation("UserAudit")
  sessions      Session[]
  refreshTokens RefreshToken[]
}

model Role {
  id           String             @id @default(cuid())
  name         String             @unique
  description  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  users        UserRole[]
  permissions  RolePermission[]
}

model Permission {
  id           String             @id @default(cuid())
  key          String             @unique // p.ej. "users.read", "users.create"
  description  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  roles        RolePermission[]
}

model UserRole {
  userId String
  roleId String
  assignedAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  grantedAt    DateTime @default(now())

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  actor     String?  // email o sistema
  action    String   // e.g., "USER_CREATE", "ROLE_ASSIGN"
  entity    String?  // tabla o tipo
  entityId  String?  // id del registro afectado
  ip        String?
  payload   Json?
  createdAt DateTime @default(now())

  user User? @relation("UserAudit", fields: [userId], references: [id], onDelete: SetNull)
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  userAgent String?
  ip        String?
  createdAt DateTime @default(now())
  revokedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  userAgent String?
  ip        String?
  createdAt DateTime @default(now())
  expiresAt DateTime
  revokedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
